<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE task PUBLIC "-//OASIS//DTD DITA Task//EN" "task.dtd">
<task id="t_customize_the_line_chart">

  <title>Customize the Line Chart</title>

  <shortdesc>This task demonstrates how to customize a line chart by adding titles, axis labels, and other customizations using Python and Matplotlib.</shortdesc>

  <taskbody>

    <steps>
      <step>
        <cmd>Import Matplotlib into Python</cmd>
        <info>To start, import the <codeph>matplotlib.pyplot</codeph> library to access plotting functionality.</info>
        <stepxmp>
          <codeblock>
import matplotlib.pyplot as plt
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Define Your Data</cmd>
        <info>Define your data by creating the x and y values. These represent the points to be plotted on the graph.</info>
        <stepxmp>
          <codeblock>
x = [1, 2, 3, 4, 5]
y = [1, 4, 9, 16, 25]
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Create the Line Plot</cmd>
        <info>Use the <codeph>plt.plot()</codeph> function to create the line plot with your x and y values.</info>
        <stepxmp>
          <codeblock>
plt.plot(x, y)
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Add a Title to the Plot</cmd>
        <info>Add a title to the plot using <codeph>plt.title()</codeph> to describe what the chart represents.</info>
        <stepxmp>
          <codeblock>
plt.title('Customized Line Chart')
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Add Axis Labels</cmd>
        <info>Label the x and y axes for clarity using <codeph>plt.xlabel()</codeph> and <codeph>plt.ylabel()</codeph>.</info>
        <stepxmp>
          <codeblock>
plt.xlabel('X Values')
plt.ylabel('Y Values')
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Add Grid Lines</cmd>
        <info>Make the plot easier to read by adding grid lines with <codeph>plt.grid()</codeph>.</info>
        <stepxmp>
          <codeblock>
plt.grid(True)
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Display the Plot</cmd>
        <info>Use <codeph>plt.show()</codeph> to display the customized plot on your screen.</info>
        <stepxmp>
          <codeblock>
plt.show()
          </codeblock>
        </stepxmp>
      </step>

      <step>
        <cmd>Final Customized Line Chart</cmd>
        <info>After running all the steps, you should now have a customized line chart with a title, axis labels, grid lines, and a styled line.</info>
        <stepxmp>
          <codeblock>
# Final complete code
import matplotlib.pyplot as plt

x = [1, 2, 3, 4, 5]
y = [1, 4, 9, 16, 25]

plt.plot(x, y)
plt.title('Customized Line Chart')
plt.xlabel('X Values')
plt.ylabel('Y Values')
plt.grid(True)
plt.show()
          </codeblock>
        </stepxmp>
      </step>

    </steps>

    <result>
      <image href="assets/images/screenshots/customplot.png" alt="Final customized line chart with grid lines, axis labels, and title" />
    </result>

  </taskbody>

</task>

